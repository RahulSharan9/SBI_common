import polars as pl
from pathlib import Path
import pandas as pd

# ---------------- CONFIG ----------------
BASE_DIR = Path(r"F:\Retail_data_ccdp_extracted")
OUT_CSV = BASE_DIR / "quarterly_OUTAMT_summary.csv"

# Define segment filenames pattern
SEGMENTS = ["AGR", "MSME", "RETAIL"]

# ---------------- MAIN LOGIC ----------------
results = []

for quarter_dir in BASE_DIR.glob("*"):
    cleaned_dir = quarter_dir / "cleaned"
    if not cleaned_dir.exists():
        continue  # skip if no cleaned folder

    for segment in SEGMENTS:
        file_path = cleaned_dir / f"cleaned_{segment}_full.parquet"
        if not file_path.exists():
            continue

        try:
            df = pl.read_parquet(file_path)
        except Exception as e:
            print(f"Error reading {file_path}: {e}")
            continue

        # Ensure OUTAMT column exists and is numeric
        if "OUTAMT" not in df.columns:
            print(f"Skipping {file_path}: no OUTAMT column.")
            continue

        # Convert OUTAMT to numeric safely
        df = df.with_columns(
            pl.col("OUTAMT")
            .cast(pl.Float64, strict=False)
            .alias("OUTAMT")
        )

        # Drop nulls
        df = df.filter(pl.col("OUTAMT").is_not_null())

        # Determine REPORTDT if available
        report_dt = None
        if "REPORTDT" in df.columns:
            try:
                report_dt = df["REPORTDT"].unique().to_list()[0]
            except:
                report_dt = "NA"
        else:
            report_dt = "NA"

        # Compute stats
        out_min = df["OUTAMT"].min()
        out_max = df["OUTAMT"].max()
        out_sum = df["OUTAMT"].sum()

        results.append({
            "Quarter": quarter_dir.name,
            "File": file_path.name,
            "REPORTDT": report_dt,
            "Min_OUTAMT": out_min,
            "Max_OUTAMT": out_max,
            "Sum_OUTAMT": out_sum
        })

# ---------------- SAVE RESULT ----------------
if results:
    summary_df = pd.DataFrame(results)
    summary_df.sort_values(by=["Quarter", "File"], inplace=True)
    summary_df.to_csv(OUT_CSV, index=False)
    print(f"✅ Summary written to: {OUT_CSV}")
else:
    print("⚠️ No results found.")
