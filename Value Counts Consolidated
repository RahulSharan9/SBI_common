import os
import pandas as pd
import re

# >>> EDIT THIS <<<
list_of_columns = ["X", "A", "Y"]  # columns you want to consolidate
base_dir = "output_folder"

all_rows = []

# Step 1: Load all value count CSVs across quarters
for quarter in os.listdir(base_dir):
    quarter_path = os.path.join(base_dir, quarter)
    if not os.path.isdir(quarter_path):
        continue

    data_quality_path = os.path.join(quarter_path, "data_quality")
    if not os.path.isdir(data_quality_path):
        continue

    # Look for value count CSVs
    for fname in os.listdir(data_quality_path):
        if fname.endswith(".csv") and "value" in fname.lower():
            fpath = os.path.join(data_quality_path, fname)
            df = pd.read_csv(fpath)

            # Normalize column names
            df.columns = df.columns.str.strip().str.lower()

            required_cols = {"value", "count", "file", "column"}
            if not required_cols.issubset(df.columns):
                continue

            # Filter only the columns we want
            df = df[df["column"].isin(list_of_columns)]
            if df.empty:
                continue

            # Extract segment robustly
            df["segment"] = df["file"].str.extract(r"(seg_?\d+)", flags=re.IGNORECASE, expand=False)
            df["segment"] = df["segment"].str.replace("_","").str.upper()  # normalize SEG_1 -> SEG1

            all_rows.append(df)

# Step 2: Combine all quarters
if all_rows:
    combined_df = pd.concat(all_rows, ignore_index=True)

    # Step 3: Aggregate counts across quarters
    summary_df = combined_df.groupby(["segment", "column", "value"], as_index=False)["count"].sum()
    summary_df = summary_df.rename(columns={"count": "total_count"})

    # Optional: sort for readability
    summary_df = summary_df.sort_values(["segment", "column", "value"])

    summary_df.to_csv("consolidated_value_counts_across_quarters.csv", index=False)
    print("✅ Aggregated value counts saved as consolidated_value_counts_across_quarters.csv")
    display(summary_df.head(20))

else:
    print("⚠️ No matching rows found for selected columns.")
