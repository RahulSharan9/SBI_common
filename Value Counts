import os
import pandas as pd
from pandas.tseries.offsets import MonthEnd

# >>> EDIT THIS <<< 
# Only these columns will be analysed across quarters
list_of_columns = ["ACCOUNTID", "PRODUCT", "REGION"]  # example

# Base folder where quarter subfolders exist
base_dir = r"path\to\output_folder"

all_rows = []

# Walk through all quarter folders
for quarter in os.listdir(base_dir):
    quarter_path = os.path.join(base_dir, quarter)
    if not os.path.isdir(quarter_path):
        continue

    data_quality_path = os.path.join(quarter_path, "data_quality")
    if not os.path.isdir(data_quality_path):
        continue

    # Look for value count CSVs
    for fname in os.listdir(data_quality_path):
        if fname.endswith(".csv") and "value" in fname.lower():
            fpath = os.path.join(data_quality_path, fname)

            # Read CSV with enforced dtypes to avoid mixed type warnings
            df = pd.read_csv(
                fpath,
                dtype={
                    "value": str,
                    "count": float,
                    "file": str,
                    "column": str
                }
            )

            # Normalize column names
            df.columns = df.columns.str.strip().str.lower()

            required_cols = {"value", "count", "file", "column"}
            if not required_cols.issubset(df.columns):
                continue

            # Filter only requested columns (case-insensitive)
            df = df[df["column"].str.upper().isin(list_of_columns)]
            if df.empty:
                continue

            # Extract segment name from filename (strip .parquet)
            df["segment"] = df["file"].str.replace(".parquet", "", regex=False).str.strip()

            # Add quarter metadata
            df["quarter"] = quarter

            # Create a sortable quarter end date
            # Works with full month names, 3-letter abbreviations, etc.
            df["quarter_date"] = pd.to_datetime(df["quarter"] + "_01", errors="coerce") + MonthEnd(0)

            all_rows.append(df)

# Combine outputs
if all_rows:
    final_df = pd.concat(all_rows, ignore_index=True)

    # Reorder columns
    final_df = final_df[[
        "quarter",
        "quarter_date",
        "segment",
        "column",
        "value",
        "count",
        "file"
    ]]

    # Sort for readability
    final_df = final_df.sort_values(["quarter_date", "segment", "column", "count"],
                                    ascending=[True, True, True, False])

    final_df.to_csv("value_counts_trend.csv", index=False)
    print("✅ Summary generated: value_counts_trend.csv")

else:
    print("⚠️ No matching rows found for your selected columns.")
